// Generated by CoffeeScript 1.7.1
(function() {
  this.CommentApp || (this.CommentApp = {});

  CommentApp.styleByState = function(li, comment) {
    if (comment.state === "completed") {
      $('.comment_state', li).attr('checked', true);
      $('label.active', li).removeClass('active');
      return $('.comment_title', li).addClass('completed').attr('disabled', true);
    } else {
      $('.comment_state', li).attr('checked', false);
      $('label', li).addClass('active');
      return $('.comment_title', li).removeClass('completed').attr('disabled', false);
    }
  };

  CommentApp.addComment = function() {
    var comment, comment_ele, request;
    comment_ele = $('.comment_area');
    comment = {
      comment_cont: comment_ele.val()
    };
    if ((comment.comment_cont == null) || comment.comment_cont.trim() === "") {
      return alert("评论内容不能为空");
    } else {
      request = $.post('api/comments', {
        comment: comment
      });
      request.fail((function(_this) {
        return function(response) {
          var message;
          message = response.parse(response.responseText).message;
          return alert(message);
        };
      })(this));
      return request.done((function(_this) {
        return function(comment) {
          var floor;
          floor = $('.comments-warper > li').length;
          CommentApp.appendComment(comment, floor);
          return comment_ele.val("");
        };
      })(this));
    }
  };

  CommentApp.getComments = function() {
    var request;
    request = $.get('api/comments');
    console.log(1);
    return request.done(function(comments) {
      var comment, floor, i, leng, _i, _len, _ref, _results;
      leng = comments.length;
      _ref = comments.reverse();
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        comment = _ref[i];
        floor = i + 1;
        _results.push(CommentApp.appendComment(comment, floor));
      }
      return _results;
    });
  };

  CommentApp.appendComment = function(comment, floor) {
    var date_time, li, template;
    date_time = comment.create_at.split('.')[0].replace('T', ' ');
    comment.create_at = date_time;
    comment.floor = floor;
    template = _.template(Templates.list_item_template)(comment);
    li = $(template);
    $('#comments').append(li);
    CommentApp.watchForChanges(li, comment);
    return CommentApp.styleByState(li, comment);
  };

  CommentApp.updateComment = function(li, comment) {
    var id, request;
    comment.title = $('.comment_title', li).val();
    if ((comment.title == null) || comment.title.trim() === " ") {
      return alert("title can't be blank");
    } else {
      if ($('.comment_state', li).attr('checked') != null) {
        comment.state = "completed";
      } else {
        comment.state = "pending";
      }
      id = $(li).attr('id');
      request = $.post('/api/comments/' + id, {
        comment: comment,
        _method: 'post'
      });
      request.fail((function(_this) {
        return function(response) {
          var message;
          message = response.parse(response.responseText).message;
          return alert(message);
        };
      })(this));
      return request.done(function(comment) {
        return CommentApp.styleByState(li, comment);
      });
    }
  };

  CommentApp.deleteComment = function(li, comment) {
    var id, request;
    id = $(li).attr('id');
    request = $.post('/api/comments/' + id, {
      _method: 'delete'
    });
    return request.done((function(_this) {
      return function() {
        $('#comments li:not("#new_comment")').remove();
        return CommentApp.getComments();
      };
    })(this));
  };

  CommentApp.watchForChanges = function(li, comment) {
    $('.comment_state', li).click((function(_this) {
      return function(e) {
        return CommentApp.updateComment(li, comment);
      };
    })(this));
    $('.comment_title', li).keypress((function(_this) {
      return function(e) {
        if (e.keyCode === 13) {
          return CommentApp.updateComment(li, comment);
        }
      };
    })(this));
    return $('.danger', li).click((function(_this) {
      return function(e) {
        return CommentApp.deleteComment(li, comment);
      };
    })(this));
  };

}).call(this);
