// Generated by CoffeeScript 1.7.1
(function() {
  this.CommentApp || (this.CommentApp = {});

  CommentApp.addComment = function(current, element) {
    var comment, commentEle, commentUserName, request;
    commentUserName = current.find('.user-name');
    commentEle = current.find('.comment_area');
    comment = {
      ref_id: element,
      user_name: commentUserName.val(),
      comment_cont: commentEle.val()
    };
    if ((comment.user_name == null) || comment.user_name.trim() === "") {
      return alert("姓名不能为空");
    } else if ((comment.comment_cont == null) || comment.comment_cont.trim() === "") {
      return alert("评论内容不能为空");
    } else {
      request = $.post('api/comments', {
        comment: comment
      });
      request.fail((function(_this) {
        return function(response) {
          var message;
          message = response.parse(response.responseText).message;
          return alert(message);
        };
      })(this));
      return request.done((function(_this) {
        return function(comment) {
          var floor;
          floor = $('.comments-warper > li').length;
          CommentApp.appendComment(comment, floor);
          commentUserName.val("");
          return commentEle.val("");
        };
      })(this));
    }
  };

  CommentApp.getComments = function() {
    var request;
    request = $.get('api/comments');
    return request.done(function(comments) {
      var comment, floor, i, leng, _i, _len, _ref, _results;
      leng = comments.length;
      _ref = comments.reverse();
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        comment = _ref[i];
        floor = i + 1;
        _results.push(CommentApp.appendComment(comment, floor));
      }
      return _results;
    });
  };

  CommentApp.appendComment = function(comment, floor) {
    var dateTime, li, opts, template;
    dateTime = comment.create_at.split('.')[0].replace('T', ' ');
    comment.create_at = dateTime;
    comment.floor = floor;
    template = _.template(Templates.list_item_template)(comment);
    li = $(template);
    $('#comments').append(li);
    if (comment.remove_opts === false) {
      opts = $('<a href="javascript:;" class="reply">回复</a><a href="javascript:;" class="danger">删除</a>');
      li.find('.comment-footer').append(opts);
    }
    return CommentApp.watchForChanges(li, comment);
  };

  CommentApp.deleteComment = function(li, comment) {
    var id, request;
    comment.comment_cont = "该评论已删除";
    comment.remove_opts = true;
    comment.create_at = $(li).find('.create-time').text().replace(' ', 'T');
    id = $(li).attr('id');
    request = $.post('/api/comments/' + id, {
      comment: comment,
      _method: 'put'
    });
    request.fail((function(_this) {
      return function(response) {
        var message;
        message = response.parse(response.responseText).message;
        return alert(message);
      };
    })(this));
    return request.done(function() {
      $(li).find('.comment-cont').text("该评论已删除");
      return $(li).find('.comment-footer a').remove();
    });
  };

  CommentApp.watchForChanges = function(li, comment) {
    var flag;
    flag = false;
    $('.danger', li).click((function(_this) {
      return function(e) {
        return CommentApp.deleteComment(li, comment);
      };
    })(this));
    return $('.reply', li).click((function(_this) {
      return function(e) {
        var reply_box, template;
        template = _.template(Templates.list_reply_box)();
        reply_box = $(template);
        if (flag === false) {
          $(li).find('.comment-self').append(reply_box);
          flag = true;
        } else {
          $(li).find('.reply-box').remove();
          flag = false;
        }
        $(li).siblings().find('.reply-box').remove();
        return $('.reply-box .btn-submit', li).click(function() {
          var commentEle, refId, replyBox;
          refId = $(li).attr('data-key');
          commentEle = refId;
          replyBox = $('.reply-box');
          return CommentApp.addComment(replyBox, commentEle);
        });
      };
    })(this));
  };

}).call(this);
